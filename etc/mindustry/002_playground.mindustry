2022-11-21
# impact reactor
remove burningTime by waiting each loop that time

```c like modify
void main(void) {
    while (true) {
        if (switch.isEnabled) {
            for ((index, reactor) in ::link.enumerated()) {
                if (reactor.isEnabled) {
                    if (netPower <= 0)
                        reactor.isEnabled = false;
                } else {
                    if (netPower > 2000) {
                        reactor.isEnabled = true;
                        break;
                    }
                }
            }
        } else {
            for (reactor in ::link)
                reactor.isEnabled = false;
        }

        ::wait(10.0);
    }
}
```

start:
set linkIndex 0

mainLoop:
set linkIndex 0
sensor switchIsEnabled switch1 @enabled
jump switchIsNotEnabled notEqual switchIsEnabled true

switchIsEnabled:
getlink reactor linkIndex
sensor type reactor @type
jump updateIterateSwitchIsEnabled notEqual type @impact-reactor
sensor reactorIsEnabled reactor @enabled
jump isNotEnable notEqual reactorIsEnabled true

isEnabled:
sensor powerNetIn reactor @powerNetIn
sensor powerNetOut reactor @powerNetOut
op sub netPower powerNetIn powerNetOut
jump turnOff lessThanEq netPower 0
jump updateIterateSwitchIsEnabled always x false

turnOff:
control enabled reactor 0 0 0 0
jump updateIterateSwitchIsEnabled always x false

isNotEnable:
sensor powerNetIn reactor @powerNetIn
sensor powerNetOut reactor @powerNetOut
op sub netPower powerNetIn powerNetOut
jump updateIterateSwitchIsEnabled lessThanEq netPower 2000

turnOn:
control enabled reactor 1 0 0 0
jump afterIterate always x false

updateIterateSwitchIsEnabled:
op add linkIndex linkIndex 1
jump switchIsEnabled lessThan linkIndex @links
jump afterIterate always x false

switchIsNotEnabled:
getlink reactor linkIndex
sensor type reactor @type
jump updateIterateSwitchIsNotEnabled notEqual type @impact-reactor
control enabled reactor 0 0 0 0

updateIterateSwitchIsNotEnabled:
op add linkIndex linkIndex 1
jump switchIsNotEnabled lessThan linkIndex @links

afterIterate:
wait 10.0
jump mainLoop always x false

# thorium reactor
start:
mainLoop:
sensor switchIsEnabled switch1 @enabled
jump shutDown notEqual switchIsEnabled true

controlThoriumReactor:
sensor result reactor1 @cryofluid
op greaterThan result result 25
control enabled reactor1 result 0 0 0
sensor result reactor2 @cryofluid
op greaterThan result result 25
control enabled reactor2 result 0 0 0
jump updateLoop always x false

shutDown:
control enabled reactor1 false 0 0 0
control enabled reactor2 false 0 0 0

updateLoop:
wait 10.0
jump start always

# impact reactor
removed cryofluid check(confirmed: impact reactor do not explode when cryofluid is not enough)
```c like modify
void main(void) {
    burningTime = 0;

    while (true) {
        if (switch.isEnabled) {
            for ((index, reactor) in ::link.enumerated()) {
                if (reactor.isEnabled) {
                    if (netPower <= 0) {
                        reactor.isEnabled = false;
                    }
                } else {
                    if (::time >= burningTime
                            && netPower > 2000) {
                        reactor.isEnabled = true;
                        targetTime = @time + 5000;
                    }
                }
            }
        } else {
            for (reactor in ::link) {
                reactor.isEnabled = false;
            }
        }

        ::wait(1.0);
    }
}
```

start:
set burningTime 0
set linkIndex 0

getSwitch:
getlink switch linkIndex
sensor type switch @type
jump mainLoop equal type @switch
op add linkIndex linkIndex 1
jump getSwitch notEqual linkIndex @links

mainLoop:
set linkIndex 0
sensor switchIsEnabled switch @enabled
jump switchIsNotEnabled notEqual switchIsEnabled true

switchIsEnabled:
getlink reactor linkIndex
sensor type reactor @type
jump updateIterateSwitchIsEnabled  notEqual type @impact-reactor
sensor reactorIsEnabled reactor @enabled
jump isNotEnable notEqual reactorIsEnabled true

isEnabled:
sensor powerNetIn reactor @powerNetIn
sensor powerNetOut reactor @powerNetOut
op sub netPower powerNetIn powerNetOut
jump turnOff lessThanEq netPower 0
jump updateIterateSwitchIsEnabled always x false

turnOff:
control enabled reactor 0 0 0 0
jump updateIterateSwitchIsEnabled always x false

isNotEnable:
jump updateIterateSwitchIsEnabled lessThan @time burningTime
sensor powerNetIn reactor @powerNetIn
sensor powerNetOut reactor @powerNetOut
op sub netPower powerNetIn powerNetOut
jump updateIterateSwitchIsEnabled lessThanEq netPower 2000

turnOn:
control enabled reactor 1 0 0 0
op add burningTime @time 5000
jump updateIterateSwitchIsEnabled always x false

updateIterateSwitchIsEnabled:
op add linkIndex linkIndex 1
jump switchIsEnabled lessThan linkIndex @links
jump afterIterate always x false

switchIsNotEnabled:
getlink reactor linkIndex
sensor type reactor @type
jump updateIterateSwitchIsNotEnabled notEqual type @impact-reactor
control enabled reactor 0 0 0 0

updateIterateSwitchIsNotEnabled:
op add linkIndex linkIndex 1
jump switchIsNotEnabled lessThan linkIndex @links

afterIterate:
wait 1.0
jump mainLoop always x false

# test
start:
getlink first 0
getlink second 1
getlink third 2

main:

printFirst:
sensor result first @type
jump firstIsNotReactor notEqual result @impact-reactor

firstIsReactor:
print "first is reactor"
printflush message1
wait 1.0
jump printSecond always x false

firstIsNotReactor:
print "first is not reactor"
printflush message1
wait 1.0

printSecond:
sensor result second @type
jump secondIsNotMessage notEqual result @message

secondIsMessage:
print "second is message"
printflush message1
wait 1.0
jump again always x false

secondIsNotMessage:
print "second is not message"
printflush message1
wait 1.0

again:
jump main always x false

inline call:
op sub bp bp 1
op add temp @counter 2
write temp cell1 bp
set @counter <function>

# impact reactor
start:
bp = 64
jump main always x false

return:
read pc cell1 bp
op sub bp bp 1
set @counter pc

main:

```c like modify
void main(void) {
    burningTime = 0;

    while (true) {
        if (switch.isEnabled) {
            for ((index, reactor) in ::link.enumerated()) {
                if (reactor.isEnabled) {
                    if (reactor.cryofluid <= 15
                            || netPower <= 0) {
                        reactor.isEnabled = false;
                    }
                } else {
                    if (::time >= burningTime
                            && netPower > 2000
                            && reactor.cryofluid > 15) {
                        reactor.isEnabled = true;
                        targetTime = @time + 5000;
                    }
                }
            }
        } else {
            for (reactor in ::link) {
                reactor.isEnabled = false;
            }
        }

        ::wait(1.0);
    }
}
```

start:
set burningTime 0
set linkIndex 0

getSwitch:
getlink switch linkIndex
sensor type switch @type
jump mainLoop equal type @switch
op add linkIndex linkIndex 1
jump getSwitch notEqual linkIndex @links

mainLoop:
set linkIndex 0
sensor switchIsEnabled switch @enabled
jump switchIsNotEnabled notEqual switchIsEnabled true

switchIsEnabled:
getlink reactor linkIndex
sensor type reactor @type
jump updateIterateSwitchIsEnabled  notEqual type @impact-reactor
sensor reactorIsEnabled reactor @enabled
jump isNotEnable notEqual reactorIsEnabled true

isEnabled:
sensor cryofluid reactor @cryofluid
jump turnOff lessThanEq cryofluid 15
sensor powerNetIn reactor @powerNetIn
sensor powerNetOut reactor @powerNetOut
op sub netPower powerNetIn powerNetOut
jump turnOff lessThanEq netPower 0
jump updateIterateSwitchIsEnabled always x false

turnOff:
control enabled reactor 0 0 0 0
jump updateIterateSwitchIsEnabled always x false

isNotEnable:
jump updateIterateSwitchIsEnabled lessThan @time burningTime
sensor powerNetIn reactor @powerNetIn
sensor powerNetOut reactor @powerNetOut
op sub netPower powerNetIn powerNetOut
jump updateIterateSwitchIsEnabled lessThanEq netPower 2000
sensor cryofluid reactor @cryofluid
jump updateIterateSwitchIsEnabled lessThanEq cryofluid 15

turnOn:
control enabled reactor 1 0 0 0
op add burningTime @time 5000
jump updateIterateSwitchIsEnabled always x false

updateIterateSwitchIsEnabled:
op add linkIndex linkIndex 1
jump switchIsEnabled lessThan linkIndex @links
jump afterIterate always x false

switchIsNotEnabled:
getlink reactor linkIndex
sensor type reactor @type
jump updateIterateSwitchIsNotEnabled notEqual type @impact-reactor
control enabled reactor 0 0 0 0

updateIterateSwitchIsNotEnabled:
op add linkIndex linkIndex 1
jump switchIsNotEnabled lessThan linkIndex @links

afterIterate:
wait 1.0
jump mainLoop always x false

2022-11-20
# impact reactor
set activeCount 0
set targetTime @time
set index 0
getlink reactor index
sensor cryofluid reactor @cryofluid
jump 14 lessThanEq cryofluid 15
sensor powerNetIn reactor @powerNetIn
sensor powerNetOut reactor @powerNetOut
op sub current powerNetIn powerNetOut
jump 14 lessThanEq current 0
jump 21 lessThan index activeCount
jump 21 lessThan current 2000
jump 17 equal index activeCount
jump 15 always x false
set activeCount 0
control enabled reactor false 0 0 0
jump 21 always x false
jump 21 lessThan @time targetTime
op add activeCount activeCount 1
control enabled reactor true 0 0 0
op add targetTime @time 5000
op add index index 1
jump 3 lessThan index @links
jump 2 always x false

```c like
void main(void) {
    activeCount = 0;
    targetTime = 0;

    for (index = 0; true; index = (index + 1) % link.count) {
        reactor = link.get(index);

        if (reactor.cryofluid <= 15) {
            activeCount = 0;
            reactor.enabled = false;
            continue;
        }

        current = reactor.powerNetIn - reactor.powerNetOut;
        if (current <= 0) {
            activeCount = 0;
            reactor.enabled = false;
            continue;
        }

        if (index < activeCount)
            continue;

        if (current < 2000)
            continue;

        if (index == activeCount) {
            turnOn();
            continue;
        }

        reactor.enabled = false;
    }
}

void turnOn(void) {
    if (@time < targetTime)
        return;

    ++activeCount;
    reactor.enabled = true;
    targetTime = @time + 5000;
}
```

# impact reactor
set activeCount 0
set targetTime 0
set index 0
getlink reactor index
sensor cryofluid reactor @cryofluid
jump 14 lessThanEq cryofluid 15
sensor powerNetIn reactor @powerNetIn
sensor powerNetOut reactor @powerNetOut
op sub current powerNetIn powerNetOut
jump 14 lessThanEq current 0
jump 17 lessThan index activeCount
jump 21 lessThan current 2000
jump 17 equal index activeCount
jump 15 always x false
set activeCount 0
control enabled reactor false 0 0 0
jump 21 always x false
jump 21 lessThan @time targetTime
op add activeCount activeCount 1
control enabled reactor true 0 0 0
op add targetTime @time 5000
op add index index 1
jump 3 lessThan index @links
jump 2 always x false

```seudo
main() {
    activeCount = 0;
    targetTime = 0;

reset:
    index = 0;

loop:
    reactor = link.get(index);
    cryofluid = reactor.sensor(@cryofluid);
    if (cryofluid <= 15) goto switchOff;
    powerNetIn = reactor.sensor(@powerNetIn);
    powerNetOut = reactor.sensor(@powerNetOut);
    current = powerNetIn - powerNetOut;
    if (current <= 0) goto switchOff;
    if (index < activeCount) goto turnOn;
    if (current < 2000) goto nextLoop;
    if (index == activeCount) goto turnOn;
    goto turnOff;

switchOff:
    activeCount = 0;
turnOff:
    reactor.enabled = false;
    goto nextLoop;

turnOn:
    if (@time < targetTime) goto nextLoop;
    ++activeCount;
    reactor.enabled = true;
    targetTime = @time + 5000;
nextLoop:
    ++index;
    if (index < link.count) goto loop;
    goto reset;
}
```

```c like
void main(void) {
    activeCount = 0;
    targetTime = 0;
    index = 0;

    for (; true; index = (index + 1) % link.count) {
        reactor = link.get(index);

        cryofluid = reactor.sensor(@cryofluid);
        if (cryofluid <= 15) {
            activeCount = 0;
            turnOff();
            continue;
        }

        current = reactor.powerNetIn - reactor.powerNetOut;
        if (current <= 0) {
            activeCount = 0;
            turnOff();
            continue;
        }

        if (index < activeCount) {
            turnOn();
            continue;
        }

        if (current < 2000)
            continue;

        if (index == activeCount) {
            turnOn();
            continue;
        }

        turnOff();
    }
}

void turnOff(void) {
    reactor.enabled = false;
    goto nextLoop;
}

void turnOn(void) {
    if (@time < targetTime)
        return;

    ++activeCount;
    reactor.enabled = true;
    targetTime = @time + 5000;
}
```

```c like clean
void main(void) {
    activeCount = 0;
    targetTime = 0;

    for (index = 0; true; index = (index + 1) % link.count) {
        reactor = link.get(index);

        if (reactor.cryofluid <= 15) {
            activeCount = 0;
            reactor.enabled = false;
            continue;
        }

        current = reactor.powerNetIn - reactor.powerNetOut;
        if (current <= 0) {
            activeCount = 0;
            reactor.enabled = false;
            continue;
        }

        if (index < activeCount) {
            turnOn();
            continue;
        }

        if (current < 2000)
            continue;

        if (index == activeCount) {
            turnOn();
            continue;
        }

        reactor.enabled = false;
    }
}

void turnOn(void) {
    if (@time < targetTime)
        return;

    ++activeCount;
    reactor.enabled = true;
    targetTime = @time + 5000;
}
```

//	reactor control 2
sensor result reactor1 @cryofluid
op greaterThan result result 15
control enabled reactor1 result 0 0 0
sensor result reactor2 @cryofluid
op greaterThan result result 15
control enabled reactor2 result 0 0 0

//	reactor control 4
set activeCount 0
set targetTime 0
set index 0
getlink reactor index
sensor cryofluid reactor @cryofluid
jump 14 lessThanEq cryofluid 15
sensor powerNetIn reactor @powerNetIn
sensor powerNetOut reactor @powerNetOut
op sub current powerNetIn powerNetOut
jump 14 lessThanEq current 0
jump 17 lessThan index activeCount
jump 21 lessThan current 2000
jump 17 equal index activeCount
jump 15 always
set activeCount 0
control enabled reactor false
jump 21 always
jump 21 lessThan @time targetTime
op add activeCount activeCount 1
control enabled reactor true
op add targetTime @time 5000
op add index index 1
jump 3 lessThan index @links
jump 2 always



for (index, reactor) in reactors.enumerated() {
	if reactor.cryofluid <= 0 {
		reactor.enable = false
		activeCount = 0
		continue
	}
	current = reactor.powerNetIn - reactor.powerNetOut
	if current <= 0 {
		reactor.enable = false
		activeCount = 0
		continue
	}
	if index < activeCount {
		reactor.enable = true
		continue
	}
	if current >= 2000  && index == activeCount {
		activeCount += 1;
		reactor.enable = true
		continue
	}
}





//	test
op add targetTime @time 1000
jump 1 lessThan @time targetTime
sensor enabled switch1 @enabled
print enabled
op equal enabled enabled false
print enabled
control enabled switch1 enabled 0 0 0
printflush message1



//	building copy
//	steam_generator_a
bXNjaAF4nFWPa27DIBCEJwZj11Fb9QQ9gc8UuYZaSA44GBL1fL1Kf/UQdRc2alIhtPuxj2HQYF9BuuFo8LJGMxwPk3EmDNGHw4C9NusY7BKtd0CDp+S0Ce+zv/TTEA2e34LVk+lH787mwwd0i7+Y0DuvqVj29X/70I1pjvZc8sfZnpLVffApGsIlzWvZo5ONAF7pYgexo1A127Z90/0sKJtcI/wRFSV1W1NjPgJy2yApkxClVd1aM7Y3FMgPJVQQ15kcFIcWokauCnrILZkEk2SqmRRTw3Sde2DqsoJkIclCkoUkC8k8QP9kq4qtfl2tqnurGdV/vLPzC3/9XdI=
//	steam_generator_b
bXNjaAF4nD2OAU7DMAxFf+Kyjk2AEOfImaausaZIW7JlKZyDoyGug1S+g4QS++vbfk6wx+gx5OmieL03nS6Hk2atUyv1cMQ+6n2u6dpSycADdvNybunduthdy4fWkEtUvHQ0/KN4PtYUTxrmkuOSGp7O6bakGGpZmlYAbww4iGPC1nE3xFvBxLMnQvHjuq6FLtDKn12NFLt2MJgbKJwWrukzX4wG+7HAWXUzGsXqD2VjTw+UjoxE+l8seVox2ZoTSm9+kvzmxCMR9wu7Zj84
//	thorium_reactor_2
bXNjaAF4nGNgY2BnYmDJS8xNZRAsycgvyizNjS9KTUwuyS+KN2LgTkktTi7KLCjJzM9jYGBj4E8qykxJT9VNzs8rS63ML2Lgh+rRheph4E8uqsxPyynNTNHNzaxIBQrkZiYX5esWFOUnpxYXg1SUJ5akFummVpQUQbTwFpWk66an5qUWJYK4DAxcQMzAxP7///8eID7HyMjAyMACxEDAxg4igaJ/GJkYQOKMzECCjQ8oWFIxJzklIWFHwJxZ4XPilwRMiYqZFcy0RGiy96duHlGZSd1any8XeRkH7/jELXKp8ZHqSldFyc5KjqkJpy5M0ba0X79Ew95d0VTfUFPdlDWRLaSTkaMocevxDq5vEgtvMX8RFmZmP8PLw/P//8FKN54z//8zMeyNCJ0PdBczyEWMYAbQicwMrCCHdwLxaQYQF+7i/wysQEWsDAwAZRx4sw==
//	impact_reactor_4
bXNjaAF4nFVTa2wUVRQ+M7OvznPXUBKMGtL6aKIjhm5NiAQkQmiU1mf4wQ83s7vTOunszjA7s6XGaJqW2pjKDyFI2BIVQ2vjoxrE2FCMSCIRDWlFCpgUG4yRUKLQSGDbbtdz9267NJMz33zfPfd85965FxRYyYIvraV0CBspW0u4MUfHt+XEoiAk9UzCMWzXsNIACsh2h6O5hqurKWOX7oASd4xkq64mrHRW77AckGkJtVwCZC+d1J0W02pXWzVXhwhO1tKGl6pMCWtOynL0ZEWRTGOnZyRVx/JcNJErJknPcEFJGQnHUm3HSuiZDOYLcVPLuOWWwrbVrjtq2krqqqk5rTrwCc90jaxG+pFsz8zcVSrhdFgtJjGjswNlT4BmDKgClkEQgsVisRdD5QhVgmQM6TzHAgsoEfADfjEQIoMcScA3AwJVRVLhbYzHOELDlQpkMtpwCAIRWRCJKUdNd5dNubtNGfChDX52Y6zBMR9WYHwIPDB+BAEYIopUlEgLfmBJgQmMLjaAlCMCJi+qnWwIqV/G5MZd/d5Lz6V/eCLc0FhdN3gjEl99beXQtcO57Cn/trVPf5Lo2uj/4rfab1ZfMPovNr1Ts6Xeujya7+geu/Ny54/RC38F11edamjee+/4K+lNw2f49S/MsGfPZusezT+1f+q9btM+PXVm3chor1Svj+9+//5915u875Odq+qO/f7iwht9dx5sa5Cv+Gaq/xOUGmb66OW+B36970Avt73l3UztQ98O1Zw/cCv2/IbaWydPP361Pax++tEvjR9+feloVGLt6L7Jnx9eNXB98xr+g5s9a/0/3agZmdrB93Sea+j6cjK2oXl6uO3II09etYemP+6Zm8gd3nJzMG7uPX7+WDS1czhy4uDAtu3DJ4O5fG6jMXvwdvvxz/7YP9N0e+umUNPY5kPPHvq3t5D95xm5b925HdHP+++ZZL+KvdY98N3WuLVn4vX66J7RkROX2v5Wxy6++hZcya34kyP7Hlj6cSyhwcUNf7O0/6HKqA9pFf1X/KJaYAgVFmmRIUkiAIHyf5UruSwE6WkklbFWgJwLAgIFCRgeQQlJwBYLOGkecQ5xFgLFIo4wiAXU8ohzGPniLD7zpShgv0F67hZKx1uAED4MAZ6CSEEGJoASrkVE4IEjTKBMpEyiTKZMoSwMXBAhQhY0jpEt0eqlHUJ7gTYwX2pARIomRF3asIWSKlBVXK5KVJWXqwpVw8vVCGC6SNYnlXorgUhBphAm10sml5cALlNGECgTKZMokylTyMWWqdMgOrVxhK6oXOz/AeLSj3A=
//	graphite
bXNjaAF4nEWNWwqDMBBFb2JsfEC7EhdlzWADNQkxWvrXfXYrBTvmJwMzcOZcuNDoJZQbF0IzxzE8bCL0htYp2pCsd4BCv2zPZIcQaV3RBf+iODhvCLd7tGamYfJup7ePuJaH2WwC0AICNYSARNVA8AX0cRwf3m9GpTkHxp+oGOuMPDLbS8HTtiV82q4guIaL/g4tMf8=
//	silicon
bXNjaAF4nDWODQrCMAyF39rViYqK9+ih5halMNdR598xFQQPI84kupaEfMlLeJhiYZC35YFQHEMTqthiXtOxSqHrAwMcVtsU6j15np3pFhPWf6Wv0qkK24Yw6+KFkm9jTVh2t1T2oSd/CFdKWJ7amtKuiRe/L3sCsOFAVnDKpbIZDCw4ZXBTo003fESDiagsVMYCJysW0hRZMQxDx/GygnpRnlE0ijz9KNpR/LQ55Gtyv0uTcfhQLEa8K87HS29xJHYsL6oXJ16+W3FNmA==
//	plastanium_a
bXNjaAF4nEWRYVKDMBCFF5IuFFoGdTwGR/Ai/nGwRCczlGCAdvztqTu1xQ1PLRC+eYHsy+ZRQg8x6a7eG9r0bT2MdWen/UtNeWOGnbf9aF1HlNHdaPGt2rnuYD6dJ/ZuGo2nbDe1oz3Uo8zlQ++8qXpvhoEebxVl1X6ZlH+KqWuMf2vdsXqvR0NZ747GV51rDG1b+zHZpvotve2ndjDBspnsSMWrt837TRM9yaBIbrliQAEaWAEMJEAKrIEMyCkK3Egducq/elFADGiAgRSQ5cFyQypYFqSCZYkNlcFZiaGar0u9WKijZNmkSgUxqaAUlIZaQTFUApVCrUnJQ1kiBl8ynlVwyNNMKoeDiObrfJH3RfTiIvos+iw8CU+hAhVhOc3z/B2FEytpmb3/n5V9aTSv0bxG8xrNazSv0bxG8xrNazS/AhjpME6TkQ4jHUY6jHQY6TDSYaTDSIeRDgejoKT0D13gZ6k=
//	plastanium_b
bXNjaAF4nFWR626jMBCFD+ZiIJdqf+w7VKr4tQ9U0eBGlhIgBlrtvudW+ypbtXXPmNA0uXj47DNzBg9W2CokbX00WPeHehjr1k7H+wesGjPsnO1H27VAiZsHZ5u9qXZd+2R+dw7lbjqM9qke+bwa+s6ZqndmGFD23bNxVds1BpnrptE4bA72NNmmOuPPixULHkMey2yntjHu8dA9V/t6NNhePJvJjvgx2q+kcxfAL/6x1lwSeUKEmGssP6Uxf1TAZME4FlEKJbv6WlQI3nnvT7EilhQzrPMcyn8g8m9IGJV/Bfx/pOSMnPhXlbABpkQMtBbSM+VilLBHVn2RyrROxTBiiKDSwLFQBpUx0FUzrMHcDJCWbpn4h71kiPOMfXxIUf8uX3HlSlMl8vk1KX8LmC7ZU8B8OX0PWCynJ1UQz46brxJxLu7S+b/QQESMRKSvfdjuIpogomwWXewCFovoRIGe31PPrvq7a8qNMMtcJikULiiX7QiFzDBhCNddyGUK8boVQykp5fXwy+/DF9TXp6Gvv2Hqn5hBqt8=
//	cryoufluid
bXNjaAF4nFVP7U7DMAy85WtBCAb/eYU+D79LE6ZIbdNlCbB3n1bshGkskmWffXeO8QAroOZ+8lBDOkU8On8cUlhyiDNgYVIs2Se85pD7OZSpG+L85U8xYceCz7EE103hhzi7jxTc3t8YL0v89qmbo/Pd2Ke9x/ON4krIeFrKePwHx3Bgv7+lwBsFJOSGkqKCnm7IQApsIFqimaRktpXHGkUjY+W6rmeo9UJxliSFYIqoFMPOENxV913NNN5HSHHBSDdEc001tmT9TpEqrLYgeCESO4K76r6rUb3NVTrS3007wbTzbDvWXpFuiHb+AohqVD8=
//	separator
bXNjaAF4nE2OYQ6CMAyFX7ciij+MB+FQCI0hUUYG0XgQE2/hL2+nzm5gdMvr9r007cMChQF31VGwGqSvfDU6j3UjQ+3bfmxdBzA2O982eylr153kog1/vUXvzuLLzjWCxVEOo3gAWxUox3QsSKtJFfx1EyGLyLMRLYp9vMxA4Q0TAhCe+r5g9W91SppjYPMQwk31sKTIk5un6eo+idJesohXiaccPK2kOUUG84sZMfsiJ1zFNVfVHR8EPDg0
//	disassembler
bXNjaAF4nF2NWw7CIBBFr6WvaNW4kC6KylhJWmiAtvHHrRg35Wo0OO2PiR8TOHDPXBTYJ0iN7AmV0l56T33TkcNOkT87PQRtDVD8/VbDVXqqZ5IT07FxWrVUn62Z6GYdDqNR5C6dnetWBsIp6CCNHvtfJO+pC+xuBzuTq41VBGAHbLhMbPhIIRII7o4xvnjuK6YFx8D4FoIxg+Accgi+LeaSKRflwfNcsfopOW/NShEjkvjhlw8SbsgW8QvcX04i
//	alloy
bXNjaAF4nEWPDXLCIBCFH2xISWxsj+AFcqjUUCczCTgY63gWb9dztFJ2sSP/79t9LMBgq1H5YXEwwzyHKzajO+3jdFyn4IEa27MfXfycw6U/DKuDPfs5DBmhE0N/Wty8Zvk+xCVEN/b74L/cNUS8fcRpPLgnaI/h4mLvw+gA7PIEgVTeKgM0pKFyRWJuy9aUcCthBq8Ag46B1mCHZiT3KLmnFmB5UWgEcOIGmkH3yNDZotjMFiXAFtAI4FP3CJH0PCquQjCGX86sLn+whbOTq5A4oats0C8orSKTpbGUfqHSHXW6px9wSv1MYdn+SxLZsbyllL7pD/EQNow=
//	monopoy
bXNjaAF4nCWP0Y7CIBBFL1CorlkTX/wLPoqUsSGpTDPSGj9+4w7KyzmTe8lkcMTRYqjpTjjcufLKywunTI9JytoKV2DENeVcWtkpCk1cH022qbHglIrEW+r+wnmrmeS28DPOqRF+pc1xpkqSevdn5SdJrJx101YXTtqG39O2NAAXwCDAGlg489ZnVODhOgKcU4w99zCf3A4Y4A7m/acdvaFPHf6L0KH+hWZe4T303m5BzX1sVBvVAgY1Y4Ou0c//DoA3VQ==
//	container
bXNjaAF4nCWLQQ6EMAhFv1I1jc5R5kym6bBoMlJTdePpBVmQx/t8EBF7BEkbI9z3mjD/+Mit7GepAvSIucqZinDDkmvjr1z5z9cB4KOjDTIEx2jodKFOo+CFyUI7k/VeG9xGt0lfXpBjAD39XxFe
//	vault
bXNjaAF4nCWLWwrDIBRET3wUxWylayrW+iGkGoz2I6uv4lyY4VxmcDiByv4bUff9euM+8Qo1nS2VDBL98/1o2FBy8ynHyh5Kjc/cwxH7BTgQbKM6TCG3EY9JAosU6HFDelX0fIJZZBbZtTNz9wc64ROh

# system variable usage
## useful link: https://mindustrygame.github.io/wiki/logic/3-variables/#processor-variables-and-constants

## counter
set @counter address

# backup
set activeCount 0
set targetTime @time
set index 0
getlink reactor index
sensor cryofluid reactor @cryofluid
jump 14 lessThanEq cryofluid 15
sensor powerNetIn reactor @powerNetIn
sensor powerNetOut reactor @powerNetOut
op sub current powerNetIn powerNetOut
jump 14 lessThanEq current 0
jump 21 lessThan index activeCount
jump 21 lessThan current 2000
jump 17 equal index activeCount
jump 15 always x false
set activeCount 0
control enabled reactor false 0 0 0
jump 21 always x false
jump 21 lessThan @time targetTime
op add activeCount activeCount 1
control enabled reactor true 0 0 0
op add targetTime @time 5000
op add index index 1
jump 3 lessThan index @links
jump 2 always x false
